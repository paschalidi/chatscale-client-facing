{"version":3,"sources":["../src/context/ChatContext/index.tsx","../src/config.ts","../src/components/ChatList/index.tsx","../src/components/MessageInput/index.tsx","../src/components/Messages/index.tsx","../../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs"],"sourcesContent":["import * as React from 'react';\nimport { ChatProviderProps } from \"./types\";\nimport { config } from \"../../config\";\nimport { Message } from \"../../components/Messages/types\";\n\ninterface ChatContextType {\n  organizationToken: string;\n  channelName: string;\n  isConnected: boolean;\n  currentUserId: string;\n  currentUserName?: string;\n  wsEndpoint: string;\n  ws: WebSocket | null;\n  messages: Message[];\n}\nconst ChatContext = React.createContext<ChatContextType | null>(null);\n\n\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({\n                                                            children,\n                                                            organizationToken,\n                                                            channelName,\n                                                            userId,\n                                                            userName,\n                                                            options = {\n                                                              reconnectInterval: 3000,\n                                                              maxReconnectAttempts: 5,\n                                                              debug: false\n                                                            }\n                                                          }) => {\n  const wsEndpoint = `${config.rust_ws_url}/chat/${channelName}`;\n  const [isConnected, setIsConnected] = React.useState(false);\n  const ws = React.useRef<WebSocket | null>(null);\n  const reconnectAttempts = React.useRef(0);\n  const reconnectTimeout = React.useRef<number>();\n  const [messages, setMessages] = React.useState<Message[]>([]);\n\n  const connect = React.useCallback(() => {\n    try {\n      ws.current = new WebSocket(wsEndpoint);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        reconnectAttempts.current = 0;\n        if (options.debug) {\n          console.log('Connected to WebSocket')\n        }\n      };\n\n      ws.current.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n\n        if (options.debug) {\n          console.log('Received message:', data);\n        }\n\n        // Add new message to state\n        setMessages(prev => [...prev, {\n          id: crypto.randomUUID(),\n          user_id: data.user_id,\n          username: data.username,\n          room_id: data.room_id,\n          content: data.content,\n          timestamp: Date.now()\n        }]);\n      };\n\n      ws.current.onclose = () => {\n        setIsConnected(false);\n        if (reconnectAttempts.current < (options.maxReconnectAttempts || 5)) {\n          reconnectTimeout.current = window.setTimeout(connect, options.reconnectInterval);\n          reconnectAttempts.current += 1;\n          if (options.debug) console.log(`Reconnect attempt ${reconnectAttempts.current}`);\n        }\n      };\n\n      ws.current.onerror = (error) => {\n        if (options.debug) console.error('WebSocket error:', error);\n      };\n\n    } catch (error) {\n      if (options.debug) console.error('WebSocket connection error:', error);\n    }\n  }, [wsEndpoint]);\n\n  React.useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeout.current) {\n        window.clearTimeout(reconnectTimeout.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n        ws.current = null;\n      }\n    };\n  }, []);\n\n  const value = React.useMemo(() => ({\n    organizationToken,\n    channelName,\n    wsEndpoint,\n    isConnected,\n    messages,\n    ws: ws.current,\n    currentUserId: userId,\n    currentUserName:userName\n  }), [organizationToken, wsEndpoint, isConnected,messages]);\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = () => {\n  const context = React.useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};","export const config = {\n  rust_api_url: 'http://localhost:3001/api',\n  rust_ws_url: 'ws://localhost:3001/ws',\n};","import * as React from 'react';\nimport { Chat, ChatListProps } from './types';\nimport { useChat } from \"../../context/ChatContext\";\n\nexport const ChatList: React.FC<ChatListProps> = ({\n                                                    limit = 50,\n                                                    onChatSelect,\n                                                    customStyles = {},\n                                                    renderItem\n                                                  }) => {\n  const { organizationToken, channelName } = useChat();\n  const [chats, setChats] = React.useState<Chat[]>([\n    {\n      id: 'public',\n      name: 'public',\n      updatedAt: new Date().toISOString()\n    }\n\n  ]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    const fetchChats = async () => {\n      try {\n        // const response = await fetch(`/api/chats?limit=${limit}`, {\n        //   headers: {\n        //     'Authorization': `Bearer ${organizationToken}`\n        //   }\n        // });\n        // const data = await response.json();\n        // setChats(data);\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchChats();\n  }, [organizationToken, limit]);\n\n  if (isLoading) {\n    return <div>Loading chats...</div>;\n  }\n\n  return (\n    <div className={customStyles.container}>\n      {chats.map((chat) => (\n        <div\n          key={chat.id}\n          onClick={() => onChatSelect?.(chat.id)}\n          className={customStyles.chatItem}\n        >\n          {renderItem ? (\n            renderItem(chat)\n          ) : (\n            <div>\n              <h3>{chat.name}</h3>\n              {chat.lastMessage && <p>{chat.lastMessage}</p>}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};","import * as React from 'react';\nimport { MessageInputProps } from './types';\nimport { useChat } from '../../context/ChatContext';\n\nexport const MessageInput: React.FC<MessageInputProps> = ({\n                                                            placeholder = 'Type a message...',\n                                                            onSend,\n                                                            maxLength = 1000,\n                                                            disabled = false,\n\n                                                          }) => {\n  const [message, setMessage] = React.useState('');\n  const { ws, isConnected, channelName, currentUserId, currentUserName } = useChat();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim() && ws && isConnected) {\n      ws.send(JSON.stringify({\n        \"user_id\": currentUserId,\n        \"room_id\": channelName,\n        \"content\": message,\n        \"username\": currentUserName,\n        \"timestamp\": 0\n      }));\n      onSend?.(message);\n      setMessage('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"flex gap-2\">\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        disabled={disabled || !isConnected}\n        className=\"flex-1 px-3 py-2 rounded border\"\n      />\n      <button\n        type=\"submit\"\n        disabled={disabled || !message.trim() || !isConnected}\n        className=\"px-4 py-2 rounded disabled:opacity-50\"\n      >\n        Send\n      </button>\n    </form>\n  );\n};","import * as React from 'react';\nimport { Message, MessagesProps } from './types';\nimport { useChat } from '../../context/ChatContext';\nimport { clsx } from \"clsx\";\n\nexport const Messages: React.FC<MessagesProps> = ({\n                                                    className = '',\n                                                    containerClassName = '',\n                                                    messageClassName = '',\n                                                    renderMessage\n                                                  }) => {\n  const { messages, currentUserId } = useChat();\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const defaultRenderMessage = (message: Message) => {\n    return (\n      <div\n        key={message.timestamp}\n        className={clsx(\n          messageClassName,\n          'flex flex-col max-w-[70%]',\n          message.user_id === currentUserId\n            ? 'ml-auto items-end'\n            : 'items-start'\n        )}\n      >\n      <span className=\"text-xs text-muted-foreground\">\n        {message.user_id === currentUserId\n          ? ''\n          : message.username ?? 'Some user'}\n      </span>\n        <div\n          className={clsx(\n            'rounded-lg px-1 max-w-[90%]',\n            message.user_id === currentUserId\n              ? 'bg-blue-500 text-white self-end'\n              : 'bg-neutral-200 text-neutral-800 self-start'\n          )}\n        >\n          <p>{message.content}</p>\n        </div>\n      </div>)\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      <div className={`flex-1 overflow-y-auto p-4 space-y-4 ${containerClassName}`}>\n        {messages.map((message, index) => (\n          <div key={index} className=\"max-w-[70%]\">\n            {renderMessage ? renderMessage(message) : defaultRenderMessage(message)}\n          </div>\n        ))}\n        <div ref={messagesEndRef}/>\n      </div>\n    </div>\n  );\n};","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"mappings":"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","names":["React","React","React"]}